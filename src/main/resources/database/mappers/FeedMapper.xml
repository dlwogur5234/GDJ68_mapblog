<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.gdj68.mapblog.feed.FeedDAO">
  
  
  	<!-- SEARCH -->
  	<sql id = "searchSql">
		<choose>
			<when test="kind=='id'">
				AND F.ID LIKE '%'||#{search}||'%'
			</when>
			<otherwise>
				AND F.CONTENTS LIKE '%'||#{search}||'%'
			</otherwise>
		</choose>
  	</sql>
  	
  	<!-- 개인 URL -->
  	<select id="getUrl" parameterType="FeedDTO" resultType="FeedDTO">
 		SELECT DISTINCT M.URL
          FROM FEED F, MEMBER M
         WHERE F.ID = M.ID AND M.ID = #{id}
  	</select>
  	
  	<select id="getUser" parameterType="FeedDTO" resultType="MemberDTO">
  		SELECT ID, PUBLICS, NICKNAME
  		  FROM MEMBER
  		 WHERE URL = #{url}
  	</select>
  	
  	<select id="getFeedUrl" parameterType="FeedDTO" resultType="FeedDTO">
  		SELECT DISTINCT URL
  		  FROM FEED F, MEMBER M
  		 WHERE F.ID = M.ID AND F.ID = #{id} 
  	</select>
  	

  	<!-- list -->
	<select id="getList3" parameterType="Pager" resultType="FeedDTO" >
		SELECT
			* 
		FROM	
			(SELECT ROWNUM R, B.* FROM
				(
					SELECT * FROM FEED

					ORDER BY CREATEDATE DESC
				) B
			)
		WHERE R BETWEEN #{startRow} AND #{lastRow}
	</select>
  	 
  	 	 
  	 
  	 <select id="getList2" parameterType="MemberDTO" resultType="FeedDTO">
         SELECT FEEDNUM, ID, TITLE, CONTENTS, TO_CHAR(TRIPDATE, 'yyyy-mm-dd') AS TRIPDATE, LAT, LNG
           FROM FEED
          WHERE ID = #{id}
  	 </select>
  	 
  	  
	<select id="getList" parameterType="Pager" resultType="FeedDTO">
	SELECT F.*
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY F.FEEDNUM DESC) AS RNUM
	             , F.FEEDNUM
	             , F.ID
	             , F.TITLE
	             , F.CONTENTS
	             , F.CREATEDATE
	             , TO_CHAR(F.TRIPDATE, 'YYYY-MM-DD')          AS TRIPDATE
	             , F.HIT
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = F.FEEDNUM)               AS LIKES
	             , F.PUBLICS
	             , F.LAT
	             , F.LNG
	             , FF.FILENAME                                AS THUMBNAIL
	          		FROM FEED F 
	             , MEMBER M
	             , (
	                SELECT *
	                  FROM (SELECT ROW_NUMBER() OVER(PARTITION BY FEEDNUM
	                                 ORDER BY FILENUM) AS RNUM
	                             , FILENUM
	                             , FEEDNUM
	                             , ORIGINALNAME
	                             , FILENAME
	                          FROM FEEDFILE
	                       )
	                 WHERE RNUM = 1
	               ) FF
	         WHERE F.ID = M.ID
	           AND F.FEEDNUM = FF.FEEDNUM(+)
	           AND M.URL = #{url}
	         <!-- MEMBER에 존재하는 ID와 JOIN -->
	         <include refid="searchSql"></include>
	       ) F
	 WHERE F.RNUM BETWEEN #{startRow} AND #{lastRow}
	</select>

	<select id="feedTotalCount" parameterType="Pager" resultType="Long">
	SELECT COUNT(*)
	  FROM FEED F 
	     , MEMBER M
	 WHERE F.ID = M.ID
	   AND M.URL = #{url}
	<if test="id == null">
	   AND F.PUBLICS = 0
	</if>
	  <include refid="searchSql"></include>
	</select>
 	
  	<!-- PAGER (GET TOTAL) -->
	<select id="getTotal" resultType="Long" parameterType="Pager">
	 SELECT COUNT(FEEDNUM)
	   FROM FEED U
	   WHERE 1 = 1
		<include refid="searchSql"></include>
	</select>
	
	<!-- admin feed list를 위함) -->
	<select id="getTotal2" resultType="Long" parameterType="Pager">
	 SELECT COUNT(FEEDNUM)
	   FROM FEED
	</select>
	


	<!-- GET SEQUENCE -->
	<select id="getSequence" resultType="Long">
  		SELECT FEED_SEQ.NEXTVAL FROM DUAL
  	</select>
	

	<!-- ADD -->
	<insert id="setAdd" parameterType="FeedDTO">
		
		<selectKey keyProperty="feedNum" resultType="Long" order="BEFORE">
			SELECT FEED_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		
		INSERT INTO FEED
		VALUES (#{feedNum}, #{id}, #{title}, #{contents}, SYSDATE, #{tripDate}, 0, 0, #{publics}, #{lat}, #{lng})	
	</insert>
	
	
	<!-- Delete -->
	<delete id="setDelete" parameterType="FeedDTO">
		DELETE FEED WHERE FEEDNUM = #{feedNum}
	</delete>
	

	<!-- Update -->
	<update id="setUpdate" parameterType="FeedDTO">
		UPDATE FEED SET
		TITLE = #{title},
		CONTENTS = #{contents},
		TRIPDATE = #{tripDate},
		PUBLICS = #{publics},
		LAT = #{lat},
		LNG = #{lng}
		WHERE FEEDNUM = #{feedNum}	
	</update>
	
	
	<!-- Detail -->
	<select id="getDetail" resultMap="getDetailResult" parameterType="FeedDTO">
	SELECT F.FEEDNUM
	    , F.ID
	    , F.TITLE
	    , F.CONTENTS
	    , F.CREATEDATE
	    , F.TRIPDATE
	    , F.HIT
	    , (SELECT COUNT(*)
	         FROM LIKES
	        WHERE FEEDNUM = F.FEEDNUM) AS LIKES
	    , F.PUBLICS
	    , F.LAT
	    , F.LNG
	    , FF.FILENUM
	    , FF.ORIGINALNAME
	    , FF.FILENAME
	  FROM FEED F
	     , FEEDFILE FF
	 WHERE F.FEEDNUM = FF.FEEDNUM(+)
	 			<!-- left outer join 이라는 뜻 -->
	   AND F.FEEDNUM = #{feedNum}
	</select>
	
  	<resultMap type="FeedDTO" id="getDetailResult">
  		<id column="FEEDNUM" property="feedNum"/>
  		<result column="ID" property="id"/>
  		<result column="TITLE" property="title"/>
  		<result column="CONTENTS" property="contents"/>
  		<result column="CREATEDATE" property="createDate"/>
  		<result column="TRIPDATE" property="tripDate"/>
  		<result column="HIT" property="hit"/>
  		<result column="LIKES" property="likes"/>
  		<result column="PUBLICS" property="publics"/>
  		<result column="LAT" property="lat"/>
  		<result column="LNG" property="lng"/>
  		
  		<collection property="dtos" javaType="List" ofType="FeedFileDTO">
  			<id column="FILENUM" property="fileNum"/>
  			<result column="ORIGINALNAME" property="originalName"/>
  			<result column="FILENAME" property="fileName"/>
  		</collection>
  	</resultMap>
	
	
	<!-- FILE ************************ -->
	
	<!-- FILE LIST -->
	<select id="getFileList" resultType="FeedFileDTO" parameterType="FeedDTO">
		SELECT * FROM FEED
		WHERE FEEDNUM = #{feedNum}
	</select>
	
	<!-- FILE ADD -->
  	<insert id="setFileAdd" parameterType="FeedFileDTO">
  		INSERT INTO FEEDFILE (FILENUM, FEEDNUM, ORIGINALNAME, FILENAME)
  		VALUES (FEEDFILE_SEQ.NEXTVAL, #{feedNum}, #{originalName}, #{fileName})
  	</insert>
  	
  	<!-- FILE DELETE -->
  	<delete id="setFileDelete" parameterType="FeedFileDTO">
  		DELETE FEEDFILE WHERE FILENUM=#{fileNum}
  	</delete>
  	
  	<!-- FILE DETAIL -->
	<select id="getFileDetail" parameterType="FeedFileDTO" resultType="FeedFileDTO">
  		SELECT FILENUM, FILENAME, ORIGINALNAME FROM FEEDFILE WHERE FILENUM=#{fileNum}
  	</select>
  	
  	
  	<!-- 조회수 ************************* -->
  	<update id="setHitUpdate" parameterType="feedDTO">
  		UPDATE FEED
  		SET HIT = HIT + 1
  		WHERE FEEDNUM = #{feedNum}
  	</update>
  	
  	
  	<!-- 좋아요 ************************* -->
  	
  	<!-- 좋아요 클릭 여부 -->
	<select id="getFindLikes" resultType="Long">
		SELECT COUNT(*) FROM LIKES WHERE ID=#{id} AND FEEDNUM=#{feedNum}
	</select>

	<!-- 좋아요 체크 -->
	<select id="checkLikes" parameterType="LikesDTO" resultType="Integer">
		SELECT COUNT(*)
		  FROM LIKES
		 WHERE FEEDNUM = #{feedNum}
		   AND ID = #{id}
	</select>

	<!-- 좋아요 등록 -->
	<insert id="addLikes" parameterType="LikesDTO">
	INSERT INTO LIKES (LIKESNUM, ID, FEEDNUM)
	VALUES (LIKES_SEQ.NEXTVAL, #{id}, #{feedNum})
	</insert>

	<!-- 좋아요 카운트 -->
	<select id="countLikes" parameterType="LikesDTO" resultType="Integer">
		SELECT COUNT(*)
		  FROM LIKES
		 WHERE FEEDNUM = #{feedNum}
	</select>
	
	<!-- 좋아요 취소 -->
	<delete id="deleteLikes" parameterType="LikesDTO">
		DELETE LIKES WHERE ID = #{id} AND FEEDNUM = #{feedNum}
	</delete>
	
	
	

	<!-- 좋아요 리스트 카운트 -->
	<!-- (paging 처리를 위해) -->
	<select id="getLikesCount" parameterType="Pager" resultType="Long">
	SELECT COUNT(*)
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY F.FEEDNUM DESC) RNUMS
	             , COUNT(*) OVER() TOTALCOUNT
	             , F.FEEDNUM
	             , F.ID
	             , F.TITLE
	             , F.CONTENTS
	             , F.CREATEDATE
	             , F.TRIPDATE
	             , F.HIT
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = F.FEEDNUM) AS LIKES
	             , F.PUBLICS
	             , F.LAT
	             , F.LNG
	          FROM (SELECT FEEDNUM
	                     , ID
	                     , TITLE
	                     , CONTENTS
	                     , CREATEDATE
	                     , TRIPDATE
	                     , HIT
	                     , PUBLICS
	                     , LAT
	                     , LNG
	                  FROM FEED
	                 WHERE PUBLICS = 0
	                UNION ALL
	                SELECT F.FEEDNUM
	                     , F.ID
	                     , F.TITLE
	                     , F.CONTENTS
	                     , F.CREATEDATE
	                     , F.TRIPDATE
	                     , F.HIT
	                     , PUBLICS
	                     , LAT
	                     , LNG
	                  FROM FEED F
	                 WHERE F.PUBLICS = 2
	                   AND F.ID = #{id}
	               ) F
	             , MEMBER M
	             , LIKES L
	         WHERE F.ID = M.ID --MEMBER에 존재하는 ID와 JOIN
	           AND F.FEEDNUM = L.FEEDNUM
	           AND L.ID = #{id}
	       ) FEED
	</select>

	<!-- 누른 좋아요 리스트 -->
	<select id="getLikesList" parameterType="Pager" resultType="FeedDTO">
	SELECT TOTALCOUNT - RNUMS + 1 AS RNUM
	     , FEED.*
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY F.FEEDNUM DESC) RNUMS
	             , COUNT(*) OVER() TOTALCOUNT
	             , F.FEEDNUM
	             , F.ID
	             , F.TITLE
	             , F.CONTENTS
	             , F.CREATEDATE
	             , F.TRIPDATE
	             , F.HIT
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = F.FEEDNUM) AS LIKES
	             , F.PUBLICS
	             , F.LAT
	             , F.LNG
	          FROM (SELECT FEEDNUM
	                     , ID
	                     , TITLE
	                     , CONTENTS
	                     , CREATEDATE
	                     , TRIPDATE
	                     , HIT
	                     , PUBLICS
	                     , LAT
	                     , LNG
	                  FROM FEED
	                 WHERE PUBLICS = 0
	                UNION ALL
	                SELECT F.FEEDNUM
	                     , F.ID
	                     , F.TITLE
	                     , F.CONTENTS
	                     , F.CREATEDATE
	                     , F.TRIPDATE
	                     , F.HIT
	                     , PUBLICS
	                     , F.LAT
	                     , F.LNG
	                  FROM FEED F
	                 WHERE F.PUBLICS = 2
	                   AND F.ID = #{id}
	               ) F
	             , MEMBER M
	             , LIKES L
	         WHERE F.ID = M.ID --MEMBER에 존재하는 ID와 JOIN
	           AND F.FEEDNUM = L.FEEDNUM
	           AND L.ID = #{id}
	       ) FEED
	 WHERE RNUMS BETWEEN #{startRow} AND #{lastRow}
	</select>
	
	
	<!-- 댓글 ************************* -->
  	<!-- Comment -->
  	
  	<select id="getCommentList" parameterType="FeedCommentDTO" resultType="FeedCommentDTO">
  		SELECT * FROM FEEDCOMMENT
  		WHERE FEEDNUM = #{feedNum}
  	</select>
  	
	<insert id="setAddComment" parameterType="FeedCommentDTO">
	INSERT INTO FEEDCOMMENT
	VALUES(FEEDCOMMENT_SEQ.NEXTVAL, #{feedNum}, #{id}, #{contents}, SYSDATE, 0, #{feedNum}, 0)
	</insert>
	
	<delete id="setDeleteComment" parameterType="FeedCommentDTO">
		DELETE FEEDCOMMENT
		 WHERE COMMENTNUM = #{commentNum}
	</delete>

	<update id="setUpdateComment">
		UPDATE FEEDCOMMENT
		   SET CONTENTS = #{contents}
		 WHERE COMMENTNUM = #{commentNum}
	</update>
	
 	

	<!-- 댓글 좋아요 -->
	
	<!-- 댓글 좋아요 클릭 여부 -->
	<select id="getFindCommentLikes" resultType="Long">
		SELECT COUNT(*) FROM FEEDCOMMENTLIKES WHERE ID=#{id} AND COMMENTNUM=#{commentNum}
	</select>

	<!-- 댓글 좋아요 체크 -->
	<select id="checkCommentLikes" parameterType="FeedCommentLikesDTO" resultType="Integer">
	SELECT COUNT(*)
	  FROM FEEDCOMMENTLIKES
	 WHERE FEEDNUM = #{feedNum}
	   AND ID = #{id}
	   AND COMMENTNUM=#{commentNum}
	</select>

	<!-- 댓글 좋아요 등록 -->
	<insert id="addCommentLikes" parameterType="FeedCommentLikesDTO">
	INSERT INTO FEEDCOMMENTLIKES (LIKESNUM, ID, FEEDNUM, COMMENTNUM)
	VALUES (FEEDCOMMENTLIKES_SEQ.NEXTVAL, #{id}, #{feedNum}, #{commentNum})
	</insert>

	<!-- 댓글 좋아요 카운트 -->
	<select id="countCommentLikes" parameterType="FeedCommentLikesDTO" resultType="Integer">
	SELECT COUNT(*)
	  FROM FEEDCOMMENTLIKES
	 WHERE COMMENTNUM=#{commentNum}
	</select>
	
	<!-- 댓글 좋아요 취소 -->
	<delete id="deleteCommentLikes" parameterType="FeedCommentLikesDTO">

	DELETE FEEDCOMMENTLIKES WHERE ID=#{id} AND COMMENTNUM=#{commentNum}
	</delete>


	
	<!-- 공개 비공개 ************************* -->
	<select id="getFeedList" resultType="FeedDTO" parameterType="Pager">
			SELECT F.*
	  FROM (
	        SELECT ROW_NUMBER() OVER(ORDER BY F.FEEDNUM DESC) AS RNUM
	             , F.FEEDNUM
	             , F.ID
	             , F.TITLE
	             , F.CONTENTS
	             , F.CREATEDATE
	             , TO_CHAR(F.TRIPDATE, 'YYYY-MM-DD')          AS TRIPDATE
	             , F.HIT
	             , (SELECT COUNT(*)
	                  FROM LIKES
	                 WHERE FEEDNUM = F.FEEDNUM)               AS LIKES
	             , F.PUBLICS
	             , F.LAT
	             , F.LNG
	             , FF.FILENAME                                AS THUMBNAIL
	          		FROM FEED F 
	             , MEMBER M
	             , (
	                SELECT *
	                  FROM (SELECT ROW_NUMBER() OVER(PARTITION BY FEEDNUM
	                                 ORDER BY FILENUM) AS RNUM
	                             , FILENUM
	                             , FEEDNUM
	                             , ORIGINALNAME
	                             , FILENAME
	                          FROM FEEDFILE
	                       )
	                 WHERE RNUM = 1
	               ) FF
	         WHERE F.ID = M.ID
	           AND F.FEEDNUM = FF.FEEDNUM(+)
	           AND M.URL = #{url}
	            AND F.PUBLICS = 0
	         <!-- MEMBER에 존재하는 ID와 JOIN -->
	         <include refid="searchSql"></include>
	       ) F
	 WHERE F.RNUM BETWEEN #{startRow} AND #{lastRow}
	</select>
	
	<!-- 차단자 확인  -->
	 <select id="confirmIgnore" parameterType="IgnoreDTO" resultType="IgnoreDTO2">
 		SELECT * FROM IGNORE
 		WHERE IGNORING=#{ignoring} AND IGNORED=#{ignored}
  	</select>
  	
  	<!-- 팔로우 확인  -->
  	<select id="confirmFollow" parameterType="ConfirmFollowDTO" resultType="ConfirmFollowDTO">
 		SELECT * FROM FOLLOW
 		WHERE FROMUSER=#{fromUser} AND TOUSER=#{toUser}
  	</select>
  	
  	<!-- 팔로우한 사람이 리스트접근 -->
  	<select id="getFeedListF" resultType="FeedDTO" parameterType="String">
		SELECT * FROM FEED WHERE ID=#{id} AND PUBLICS != 2
	</select>
	
	<select id="checkFollow" parameterType="FollowDTO" resultType="Integer">
		SELECT COUNT(*) FROM FOLLOW WHERE FROMUSER = #{fromUser} and TOUSER = (SELECT NICKNAME FROM MEMBER WHERE URL = #{toUser})
	</select>

	<select id="getFeedListUnF" resultType="FeedDTO" parameterType="Pager">
		SELECT * FROM FEED WHERE ID=#{id} AND PUBLICS=0
	</select>

	<update id="likesPlus" parameterType="likesDTO">
		UPDATE FEED SET
		LIKES = LIKES + 1
		WHERE FEEDNUM = #{feedNum}	
	</update>
	
	<update id="likesMinus" parameterType="likesDTO">
		UPDATE FEED SET
		LIKES = LIKES - 1
		WHERE FEEDNUM = #{feedNum}	
	</update>
	
	
	<!-- 게시글 랭크 -->
	
  	<resultMap type="FeedDTO" id="getFeedRank">
  		<id column="FEEDNUM" property="feedNum"/>
  		<result column="ID" property="id"/>
  		<result column="TITLE" property="title"/>
  		<result column="CREATEDATE" property="createDate"/>
  		<result column="HIT" property="hit"/>
  		<result column="LIKES" property="likes"/>
  		<result column="FILENAME" property="fileName"/>
  		
  		<collection property="dtos" javaType="List" ofType="FeedFileDTO">
  			<id column="FILENUM" property="fileNum"/>
  			<result column="ORIGINALNAME" property="originalName"/>
  			<result column="FILENAME" property="fileName"/>
  		</collection>
  	</resultMap>
  	
  	
	<!-- 2주 이내에 작성 된 게시물 중 조회수가 가장 많은 게시물 TOP 6 -->
	<select id="getHitRank" resultType="FeedDTO">
		<![CDATA[
		SELECT A.ID
		    , A.FEEDNUM
		    , A.TITLE
		    , A.HIT
		    , A.LIKES
		    , A.CREATEDATE
		    , B.FILENAME
		FROM(
		   SELECT * 
		   FROM(
		         SELECT F.ID
		               , F.FEEDNUM
		               , F.TITLE
		               , F.HIT
		               , F.LIKES
		               , F.CREATEDATE
		              ,MIN(FF.FILENUM) FILENUM
		         FROM (
		            SELECT *
		            FROM(
		                SELECT *
		               FROM FEED
		               WHERE CREATEDATE > SYSDATE-14
		                 AND PUBLICS = 0
		               ORDER BY HIT DESC
		               ) 
		           WHERE ROWNUM <= 6
		            ) F
		            , FEEDFILE FF
		          WHERE F.FEEDNUM = FF.FEEDNUM(+)
		          GROUP BY F.ID
		                  , F.FEEDNUM
		                  , F.TITLE
		                  , F.HIT
		                  , F.LIKES
		                  , F.CREATEDATE
		      )
		   ORDER BY HIT DESC
		   ) A
		LEFT OUTER JOIN FEEDFILE B 
		ON A.FILENUM = B.FILENUM 
		ORDER BY HIT DESC]]>
	</select>
	
	<!-- 2주 이내에 작성 된 게시물 중 좋아요가 가장 많은 게시물 TOP 6 -->
	<select id="getLikesRank" resultType="FeedDTO">
		<![CDATA[
		SELECT A.ID
		    , A.FEEDNUM
		    , A.TITLE
		    , A.HIT
		    , A.LIKES
		    , A.CREATEDATE
		    , B.FILENAME
		FROM(
		   SELECT * 
		   FROM(
		         SELECT F.ID
		               , F.FEEDNUM
		               , F.TITLE
		               , F.HIT
		               , F.LIKES
		               , F.CREATEDATE
		               , MIN(FF.FILENUM) FILENUM
		         FROM (
		            SELECT *
		            FROM(
		                SELECT *
		               FROM FEED
		               WHERE CREATEDATE > SYSDATE-14
		                 AND PUBLICS = 0
		               ORDER BY LIKES DESC, HIT DESC
		               ) 
		           WHERE ROWNUM <= 6
		            ) F
		            , FEEDFILE FF
		          WHERE F.FEEDNUM = FF.FEEDNUM(+)
		          GROUP BY F.ID
		                  , F.FEEDNUM
		                  , F.TITLE
		                  , F.HIT
		                  , F.LIKES
		                  , F.CREATEDATE
		      )
		   ORDER BY LIKES DESC, HIT DESC
		   ) A
		LEFT OUTER JOIN FEEDFILE B 
		ON A.FILENUM = B.FILENUM 
		ORDER BY LIKES DESC, HIT DESC]]>
			<!-- likes로 먼저 정렬 후, 값이 같은 likes들을 hit순으로 또 정렬해준다. -->
	</select>
	
	<!-- 최신 글 TOP 6 -->
	<select id="getNewRank" resultType="FeedDTO">
		<![CDATA[
		SELECT A.ID
			 , A.FEEDNUM
			 , A.TITLE
			 , A.HIT
			 , A.LIKES
			 , A.CREATEDATE
			 , B.FILENAME
		FROM(
			SELECT * 
			FROM(
			      SELECT F.ID
			            , F.FEEDNUM
			            , F.TITLE
			            , F.HIT
			            , F.LIKES
			            , F.CREATEDATE
			           ,MIN(FF.FILENUM) FILENUM
			      FROM (
			         SELECT *
			         FROM(
			             SELECT *
			            FROM FEED
			            WHERE CREATEDATE > SYSDATE-14
			              AND PUBLICS = 0
			            ORDER BY CREATEDATE DESC, HIT DESC
			            ) 
			        WHERE ROWNUM <= 6
			         ) F
			         , FEEDFILE FF
			       WHERE F.FEEDNUM = FF.FEEDNUM(+)
			       GROUP BY F.ID
			               , F.FEEDNUM
			               , F.TITLE
			               , F.HIT
			               , F.LIKES
			               , F.CREATEDATE
			   )
			ORDER BY CREATEDATE DESC, HIT DESC
			) A
		LEFT OUTER JOIN FEEDFILE B 
		ON A.FILENUM = B.FILENUM 
		ORDER BY CREATEDATE DESC, HIT DESC]]>
	</select>
	
	<!-- 인플루언서 TOP 3 (조회수 기준) -->
	<select id="getHitMember" resultType="MemberDTO">
		<![CDATA[
		SELECT 
		   F.HIT, M.*
			FROM(
			   SELECT *
			   FROM(
			      SELECT ID, SUM(HIT) HIT
			      FROM FEED
			      GROUP BY ID
			      ORDER BY HIT DESC
			      )
			   WHERE ROWNUM<=3
			   ) F
			   , MEMBER M
			WHERE F.ID = M.ID
			ORDER BY F.HIT DESC]]>
	</select>
	
	<!-- 인플루언서 TOP 3 (좋아요 수 기준) -->
	<select id="getLikesMember" resultType="MemberDTO">
		<![CDATA[
		SELECT 
		   F.LIKES, M.*
			FROM(
			   SELECT *
			   FROM(
			      SELECT ID, SUM(LIKES) AS LIKES
			      FROM FEED
			      GROUP BY ID
			      ORDER BY LIKES DESC
			      )
			   WHERE ROWNUM<=3
			   ) F
			   , MEMBER M
			WHERE F.ID = M.ID(+)
			ORDER BY F.LIKES DESC]]>
	</select>
	
	
	<insert id="setReplyCommentAdd" parameterType="FeedReplyDTO">
  		INSERT INTO MEETINGREPLY VALUES (MEETINGREPLY_SEQ.NEXTVAL,#{meetingNum},#{id},#{commentNum},#{contents},SYSDATE,0,#{commentNum},1,#{nickName})
  	</insert>
  	
  	 <update id="setUpdateCommentCgroup" parameterType="FeedReplyDTO">
  		UPDATE MEETINGCOMMENT SET CGROUP= CGROUP+1 WHERE COMMENTNUM=#{commentNum}
  	</update>
  	
  	 <update id="setUpdateCommentCgroupDelete" parameterType="FeedReplyDTO">
  		UPDATE MEETINGCOMMENT SET CGROUP= CGROUP-1 WHERE COMMENTNUM=#{commentNum}
  	</update>
  	
  	<select id="getReplyCommentList" resultType="FeedReplyDTO">
  		SELECT * FROM MEETINGREPLY WHERE COMMENTNUM = #{commentNum} ORDER BY COMMENTDATE
  	</select>

  	 <update id="setUpdateReplyComment" parameterType="FeedReplyDTO">
  		UPDATE MEETINGREPLY SET CONTENTS = #{contents} WHERE REPLYNUM=#{replyNum}
  	</update>
  	
  	<delete id="setDeleteReplyComment" parameterType="FeedReplyDTO">
  		DELETE MEETINGREPLY WHERE REPLYNUM = #{replyNum}
  	</delete>

	 <select id="getMember" resultType="String" parameterType="String">
  		SELECT ID FROM MEMBER WHERE URL = #{url}
  	</select>

  </mapper>